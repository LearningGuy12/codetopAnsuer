// https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/
class Solution {
    /**
     * 进行2次二分查找
     * 查找target-0.5 target+0.5的位置，一定找不到这个值，让二分查找返回第一个大于该值的index
     */
    public int[] searchRange(int[] nums, int target) {
        int index1 = partSearch(nums, target - 0.5);
        int index2 = partSearch(nums, target + 0.5) - 1;
        if (index1 > index2) {
            return new int[] { -1, -1 };
        }
        return new int[] { index1, index2 };
    }

    // 一定不会相等，找不到t，返回t应该出现的index，即数组中第一个大于t的index
    int partSearch(int[] nums, double t) {
        int l = 0, r = nums.length - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (t < nums[mid]) {
                r = mid - 1;
            } else if (t > nums[mid]) {
                l = mid + 1;
            } else {
                // 本case不会出现
            }
        }
        // 最终l在二分查找中要么找到那就是t的index，没找到就是数组中第一个大于t的index
        return l;
    }
}
