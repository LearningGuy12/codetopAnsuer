// 300. 最长上升子序列
// https://leetcode.cn/problems/longest-increasing-subsequence/
class Solution {
    /**
     * 贪心
     * 维护数组d[] d[i]表示长度最i的子序列的最后一个元素的最小值。
     * 注意d[i]是递增的，例如d[3]的值不可能比d[5]大，因为d[5]的子序列往前两位的数字一定比d[5]小，这就矛盾了
     * len代表当前为止最长的子序列
     * 如果nums[i]>d[len], 则len++, d[len]=nums[i]
     * 否则从num[len]开始倒序寻找第一个值小于nums[i]的，把他后面那个值更新为nums[i]
     * 
     */
    public int lengthOfLIS(int[] nums) {
        if (nums == null) {
            return 0;
        }
        if (nums.length < 2) {
            return nums.length;
        }
        // len代表当前为止最长的子序列长度
        int len = 1;
        // d[i]表示长度最i的子序列的最后一个元素的最小值。d[0]无意义
        int[] d = new int[nums.length + 1];
        d[len] = nums[0];

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > d[len]) {
                d[++len] = nums[i];
            } else {
                // 从num[len]开始倒序寻找第一个值小于nums[i]的，把他后面那个值更新为nums[i]
                // int k = findPrev(d, len, nums[i]);
                // 二分搜索加速查找
                int k = findPrevBinaySearch(d, len, nums[i]);
                d[k + 1] = nums[i];
            }
        }
        return len;
    }

    int findPrevBinaySearch(int[] d, int len, int val) {
        int l = 1, r = len;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (d[mid] < val) {
                // 注意此处如果 l = mid 可能死循环
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return l - 1;
    }

    int findPrev(int[] d, int len, int val) {
        while (len > 0) {
            if (d[len] < val) {
                return len;
            } else {
                len--;
            }
        }
        return len;
    }
}
