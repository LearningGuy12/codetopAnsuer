// https://leetcode.cn/problems/implement-stack-using-queues/description/
class MyStack {
    Deque<Integer> list1 = new LinkedList();
    Deque<Integer> list2 = new LinkedList();

    // 上述思路也可以用1个队列实现，直接list1原地翻转，例如：
    // int n = queue.size();
    // queue.offer(x);
    // for (int i = 0; i < n; i++) {
    // queue.offer(queue.poll());
    // }

    public MyStack() {

    }

    public void push(int x) {
        list1.offer(x);
    }

    public int pop() {
        int t = -1;
        while (!list1.isEmpty()) {
            t = list1.poll();
            if (list1.isEmpty()) {
                break;
            }
            list2.offer(t);
        }
        list1 = list2;
        list2 = new LinkedList();
        return t;
    }

    public int top() {
        int t = -1;
        while (!list1.isEmpty()) {
            t = list1.poll();
            list2.offer(t);
        }
        list1 = list2;
        list2 = new LinkedList();
        return t;
    }

    public boolean empty() {
        return list1.isEmpty() && list2.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
