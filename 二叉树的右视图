// 199. 二叉树的右视图
// https://leetcode.cn/problems/binary-tree-right-side-view/description/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    /**
     * 广度优先，层序遍历，每一层最后访问的节点是右视图的一个点
     */
    public List<Integer> rightSideView(TreeNode root) {
        if (root == null) {
            return new LinkedList();
        }
        List<Integer> ret = new LinkedList();

        List<TreeNode> levelNodes = new ArrayList();
        levelNodes.add(root);
        while (levelNodes != null && !levelNodes.isEmpty()) {
            levelNodes = visitLevel(levelNodes, ret);
        }
        return ret;
    }

    /**
     * 遍历当前这一层的节点列表，最后一个访问的是目标节点，接入ret列表中
     * 同时计算出下一层节点列表返回
     */
    List<TreeNode> visitLevel(List<TreeNode> levelNodes, List<Integer> ret) {
        if (levelNodes == null || levelNodes.isEmpty()) {
            return null;
        }
        List<TreeNode> nextLevelNodes = new ArrayList();
        for (int i = 0; i < levelNodes.size(); i++) {
            TreeNode node = levelNodes.get(i);
            if (i == levelNodes.size() - 1) {
                ret.add(node.val);
            }
            if (node.left != null) {
                nextLevelNodes.add(node.left);
            }
            if (node.right != null) {
                nextLevelNodes.add(node.right);
            }
        }
        return nextLevelNodes;
    }

}
