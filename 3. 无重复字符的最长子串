class Solution {
    /**
     * 遍历每个元素index l ,
     * 从l开始向后寻找，记录下已遍历过的字符existChars，直到发现某个元素s.charAt(r)出现在existChars中，说明已不满足条件。更新最长数字maxLen。
     * 然后l不需要从l+1开始，而是一直向后直到s.charAt(l)等于s.charAt(r)，l再加1。
     * 比如1234599995，如果l=1，r=10，那么其实12345的任意一个开始都一定长度小于maxLen，从第一个5之后重新计算。
     */
    public int lengthOfLongestSubstring(String s) {
        int l = 0;
        int r = 0;
        int maxLen = 1;
        if (s.length() <= 1) {
            return s.length();
        }
        Set<Character> existChars = new HashSet();
        for (; l < s.length() - 1; l++) {
            r++;
            existChars.add(s.charAt(l));
            while (r < s.length() && !existChars.contains(s.charAt(r))) {
                existChars.add(s.charAt(r));
                r++;
            }
            maxLen = Math.max(maxLen, r - l);
            if (r == s.length()) {
                break;
            }
            while (s.charAt(l) != s.charAt(r)) {
                existChars.remove(s.charAt(l));
                l++;
            }
        }
        return maxLen;
    }
}
