// https://leetcode.cn/problems/minimum-depth-of-binary-tree/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    int minDepth = Integer.MAX_VALUE;

    public int minDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        dfs(root, 1);
        return minDepth;
    }

    void dfs(TreeNode node, int curDepth) {
        if (node.left == null && node.right == null) {
            minDepth = Math.min(curDepth, minDepth);
            return;
        }
        if (curDepth > minDepth) {
            // 剪枝条件 已经比最小的深了，就直接返回不用继续往下探索了
            return;
        }
        if (node.left != null) {
            dfs(node.left, curDepth + 1);
        }
        if (node.right != null) {
            dfs(node.right, curDepth + 1);
        }
    }
}
